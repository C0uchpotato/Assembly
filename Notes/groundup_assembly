		References
/home/jackh/Documents/Programming-GroundUp-08.pdf
http://nongnu.askapache.com/pgubook/ProgrammingGroundUp-0-8.pdf
https://pacman128.github.io/static/pcasm-book.pdf
https://www.agner.org/optimize/
https://d2pgu9s4sfmw1s.cloudfront.net/UAM/Prod/Done/a062E00001UMCH4QAP/6f1e795e-41bf-4bfe-b4d4-9fb5fb98329a?Expires=1652731732&Key-Pair-Id=APKAJKRNIMMSNYXST6UA&Signature=pCTcoGxomJPvcUXlifByk4GN1H8qJUE3iJnsNEE0p5KZu0GsaK3ORytUT8ilspQdbJALygU7Oq2lo1ZtT9UcO-9NTQXEGTeSbBZiC8kRZLeS7wfH-qSojOwlPWpdicg7nQZ4hgCPMaCQBoPa329T8cBseIuftHAXF6P9Czd-A8eLJQre3KXEINKk0XvwAXeobmD5QWQqDCOihkYBBL5-kP0mYSJ3-3O7lwu4wK54F~daj7nb1IGb1JxdSXq1Vjkc4tjMLRlIZ3J9UneY-u10pPSG9A1WQMEWYKHhzlL7KtDieN1~RvcmaDt2FraRtttwi0KpprQTliTmQr32VtsGCQ__
https://cs.lmu.edu/~ray/notes/nasmtutorial/
https://www.intel.com/content/dam/www/public/us/en/documents/manuals/64-ia-32-architectures-software-developer-vol-1-manual.pdf


esc + gx to open links in Vim


Commands List

$0x80- %eax must be 1, %ebx holds the status number
as (source in a .s files) -o (output file, must end in .o)	
ld (source in a .o file) -o (filename)
./ instructs cpu to run file in the current directory
	

		Chapter 1

3 types of languages
	
	Machine Language- most basic, least abstracted
	
	Assembly Language- step between high level and machine, more user friendly
	
	High level- most abstracted, easiest to understand at a human level, one command normally
	translates to several in assembly or machine code

		Chapter 2
CPU Architecture
	
	Fetch-execute cycle- The smallest allotment of time for the CPU to read memory and execute it

	CPU Components- Program Counter, Instruction Decoder, Data Bus, General Purpose Register, Arithmetic and Logic unit

	On x86 processors a byte is a number between 0-256
	
	Addresses are 4 bytes long on x86 (4 bytes = 1 word)
	
	The size of a typical register = 1 word

	Addresses stores in memory are called pointers

Interpreting Memory
	*Reread section for notes

Data Accessing Methods

	Immediate Mode- Instead of specifying an address with the data
	we feed the data directly to the computer, simplest mode
	
	Direct Addressing Mode- Instruction contains the address to load data from
	(ex. Load data from address 2002, instructs the computer to copy the data 
	from byte 2002 into the register)

	Indexed Addressing Mode- Instruction contains an address to load the data from
	as well as an index register to offset the address. (ex. Specify address 2002
	and an index register (possibly 3, since 1 word = 4 bytes). On x86 we can also use
	multipliers, (ex. address 2002, index register 3, multiplier of 4). This would load
	the 4th word, location 2014.)

	Indirect Accessing Mode- the instruction contains a register that contains a pointer 
	from which the data should be loaded from. (ex. If we specified the %eax register,
	whatever data was in that register would be loaded to the destination)

	Base pointer addressing mode- Similar to indirect addressing, but includes an offset
	to the register before using it for lookup

		Chapter 3

Writing and compiling your first program
	See document for "exit.s"
	

Registers
	General Purpose Registers- %eax,%ebx, etc (formatted as e*x)
	4 registers up to %edx

	Special Purpose Registers- 
	%edi,%edp,%esp,%eip

	*E represents extended registers, which are 32 bit and created in
	later x86 processors. R represents further extended registers
	of 64 bits (hence 64 bit programs)

Memory Types
	.byte- One storage location per number 0-255
	
	.Int- 2 storage locations per number 0-65535

	.long- 4 storage locations 0-way too big

	.ascii- turns characters into memeory

Jump
	je- jump if equal

	jg- jump if 2nd value is greater

	jge- jump if second value is greater or equal to the first

	jl- jump if second was less than 1st

	jle- jump if second was less or equal then first

	jmp- jump no matter what

		Chapter 4
Functions

	Function Name- symbol that represents the address where the function starts
	In assembly, function name followed by a comma

	Function Parameter- Data explicitly given to the function

	Local Variables- data storage that are thrown away when the program is closed
	
	Static Variables- Variables reused each time the program is run
	*Should not be used unless necessary

	Global Variables- Data storage that can be accessed outside of the program
	Often used for config files

	Return address- invisible parameter that isn't used directly, but tells the cpu
	where to go after the function is finished, automatically passed in most languages
	
	Return value- Main method of transferring data back to the program, most languages only
	allow one return value
	
Calling convention- describes how functions expect to get and receive data when they are called

Assembly language with C calling convention
	*read reference document

**Destruction of Registers**
	Always assume the burden of saving the stack is with the function

How registers are broken down
	EAX is the register, AX is the latter half, AX is split into Ah and AL

